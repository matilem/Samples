@using Aafp.Events.Admin.ApplicationConfig
@model Aafp.Events.Admin.ViewModels.Registration.RegistrationViewModel

@if (Model.HasError)
{
    {
        ViewBag.Title = $"Pending | Quick Reg Wizard";
    }

    @Html.Partial("_RegistrationHeader")

    @Html.Partial("_Error", Model.ErrorMessage)
}
else
{
    {
        ViewBag.Title = $"Pending | {Model.Customer.FirstName.Substring(0, 1)} {Model.Customer.LastName} - {Model.Event.Code} | Quick Reg Wizard";
    }

    @Html.Partial("_UserSearchBarHeader", Model.UserSearch)

    <form id="pendingRegistrationForm">
        @Html.HiddenFor(model => model.Key)
        @Html.HiddenFor(model => model.CurrentUser)
        @Html.HiddenFor(model => model.Event.Key)
        @Html.HiddenFor(model => model.Customer.Key)
        @Html.HiddenFor(model => model.RegistrationDateDisplay)
        <header class="qr-record-header">
            <div class="layout">
                <div class="qr-etitle">
                    <h1 class="qr-etitle__title">@Model.Event.Title</h1>
                    <span class="qr-etitle__code">@Model.Event.Code</span> | <span class="qr-etitle__location">@Model.Event.LocationDisplay</span>
                </div>
                <div class="qr-ptitle">
                    <h1 class="qr-ptitle__name">@Model.Customer.FullName</h1>
                    <span class="qr-ptitle__id">@Model.Customer.CustomerId</span>
                    @if (!string.IsNullOrWhiteSpace(Model.Customer.Membership?.MemberStatusCode))
                    {
                        <span class="qr-ptitle__status">| @Model.Customer.Membership.MemberStatusCode </span>
                    }
                    @if (!string.IsNullOrWhiteSpace(Model.Customer.Membership?.MemberTypeCode))
                    {
                        <span class="qr-ptitle__type">| @Model.Customer.Membership.MemberTypeCode Member</span>
                    }
                </div>
            </div>
        </header>
        <div class="layout">
            <section class="qr-badge">
                @Html.HiddenFor(model => model.Badge.FirstName)
                @Html.HiddenFor(model => model.Badge.LastName)
                @Html.HiddenFor(model => model.Badge.Country)
                <div class="qr-badge__column column-1">
                    <div class="qr-badge__input qr-input">
                        <label class="qr-input__label" for="nickname">Nickname</label>
                        @Html.TextBoxFor(model => model.Badge.NickName, new { @class = "qr-input__input" })
                    </div>
                    <div class="qr-badge__city qr-badge__input qr-input">
                        <label class="qr-input__label" for="city">City</label>
                        @Html.TextBoxFor(model => model.Badge.City, new { @class = "qr-input__input" })
                    </div>
                    <div class="qr-badge__state qr-badge__input qr-input">
                        <label class="qr-input__label" for="state">State</label>
                        @Html.DropDownListFor(model => model.Badge.State, new SelectList(Model.Badge.States, "Code", "Code"), "", new { @class = "qr-input__input" })
                    </div>
                    @if (Model.Event.DisplayBadgeCompany)
                    {
                        <div class="qr-badge__input qr-input">
                            <label class="qr-input__label" for="custom1">@Model.Event.AlternativeCompanyBadgeLabel</label>
                            @Html.TextBoxFor(model => model.Badge.Company, new { @class = "qr-input__input" })
                        </div>
                    }
                    @if (Model.Event.DisplayBadgePosition)
                    {
                        <div class="qr-badge__input qr-input">

                            <label class="qr-input__label" for="custom2">@Model.Event.AlternativePositionBadgeLabel</label>
                            @Html.TextBoxFor(model => model.Badge.Position, new { @class = "qr-input__input" })

                        </div>
                    }
                </div>
                <div class="qr-badge__column">
                    <div class="qr-badge__input qr-badge__notes qr-input">
                        <label class="qr-input__label" for="badgeNotes">Badge Notes</label>
                        @Html.TextAreaFor(model => model.Badge.Notes, new { @class = "qr-input__input" })
                        <div class="qr-badge__shortcut-overlay">F2</div>
                    </div>
                </div>
            </section>
            <div class="qr-right-column">
                <section class="qr-reg-info -full-size-box">
                    <h4 class="qr-reg-info__title">Registration Type</h4>
                    @Html.HiddenFor(model => model.PriceKey)
                    @Html.HiddenFor(model => model.SelectedRegistrationFeePrice)
                    @Html.HiddenFor(model => model.RegistrationDate)
                    @Html.HiddenFor(model => model.SelectedRegistrationFeeDisplay)

                    @if (string.IsNullOrWhiteSpace(Model.SelectedRegistrationFeeDisplay))
                    {
                        <p id="registrationFee" class="qr-reg-info__data"><span style="color: red">No Registration Fee Selected</span></p>
                    }
                    else
                    {
                        <p id="registrationFee" class="qr-reg-info__data">@Model.SelectedRegistrationFeeDisplay</p>
                    }
                    
                    <a class="qr-reg-info__btn" id="registrationTypeEditButton"><i class="fa fa-gear"></i> Change</a>
                    <h4 class="qr-reg-info__title">Registration Date</h4>
                    <p class="qr-reg-info__data">@Model.RegistrationDateDisplay</p>
                </section>
                <section class="qr-personal-info">
                    <div class="qr-personal-info__column">
                        <div class="qr-input">
                            <label class="qr-input__label" for="address">Address</label>
                            @Html.DropDownListFor(model => model.CustomerAddressKey, new SelectList(Model.Customer.Addresses, "Key", "Address1"), "", new { @class = "qr-input__input" })
                        </div>
                        <div class="qr-input">
                            <label class="qr-input__label" for="phone">Phone</label>
                            @Html.DropDownListFor(model => model.CustomerPhoneKey, new SelectList(Model.Customer.Phones, "Key", "Number"), "", new { @class = "qr-input__input" })
                        </div>
                    </div>
                    <div class="qr-personal-info__column">
                        <div class="qr-input">
                            <label class="qr-input__label" for="emergName">Emergency contact name</label>
                            @Html.TextBoxFor(model => model.EmergencyContactName, new { @class = "qr-input__input", placeholder = "Click to enter data" })
                        </div>
                        <div class="qr-input">
                            <label class="qr-input__label" for="emergPhone">Emergency contact Phone</label>
                            @Html.TextBoxFor(model => model.EmergencyContactPhone, new { @class = "qr-input__input js-mask-phone", placeholder = "(000) 000-0000 x0000", type = "tel" })
                        </div>
                    </div>
                    <a class="qr-personal-info__edit-btn" target="_blank" href="@($"{ApplicationConfigManager.Settings.BaseUrl}/iWeb/forms/DynamicProfile.aspx?ItemKey=649d1a9d-ca93-4dd8-b5b5-aa00e10946b0&LinkKey=1913b691-4760-4e5e-97bb-0f0f97d2a8b7&FormKey=b772881d-d704-40f3-92b6-09b13a50fcc9&tab=CRM&tabitem=Individuals&key={Model.Customer.Key}")"><i class="fa fa-pencil"></i> Edit Customer Record</a>
                </section>
            </div>
            <div class="js-nav-anchor"></div>
            <nav class="qr-step-tabs js-tabs">
                <h5 class="qr-step-tabs__tab qr-step-tabs__tab-title">Sections <a class="qr-step-tabs__top" href="#top">Top <i class="fa fa-arrow-up"></i></a></h5>
                <ol>
                    @foreach (var step in Model.Event.Steps)
                    {
                        foreach (var heading in step.Headings)
                        {
                            if (heading.RequiredFlag)
                            {
                                <li><a class="qr-step-tabs__tab qr-step-tabs__tab--required" href="#@heading.Key" title="@heading.HeadingDescription">@heading.HeadingDescription</a></li>
                            }
                            else
                            {
                                <li><a class="qr-step-tabs__tab" href="#@heading.Key" title="@heading.HeadingDescription">@heading.HeadingDescription</a></li>
                            }

                        }
                    }
                </ol>
            </nav>
            @Html.EditorFor(model => model.Event.Steps)
        </div>
        <div class="qr-pre-footer-spacing"></div>
        <footer class="qr-pay-bar">
            <div class="layout">
                <a class="qr-pay-bar__cancel btn" id="cancelButton" href="@($"{ApplicationConfigManager.Settings.ApplicationUrl}registration")"><i class="fa fa-ban"></i> Cancel</a>
                <a class="qr-pay-bar__save btn" id="saveAndPayButton" href="@($"{ApplicationConfigManager.Settings.BaseUrl}payments/registration/admin/")"><i class="fa fa-save"></i> Save / Pay <span class="btn__meta">(F12)</span></a>
                <a class="qr-pay-bar__processing" href="#" id="savingButton" style="display: none"><i class="fa fa-spin fa-spinner"></i> Saving</a>
                <span id="paymentTotal" class="qr-pay-bar__due">$ 0.00</span>
            </div>
        </footer>
        <div id="registrationTypeEditDialog">
            <div id="newEventDetail">
                <div class="qr-input">
                    @Html.HiddenFor(model => model.Event.CutOffDateDisplay)
                    @if (Model.Event.CutOffDate.HasValue && Model.Event.CutOffDate > DateTime.Today)
                    {
                        <span class="qr-input__earlybird-text">Early Bird Cutoff: @Model.Event.CutOffDateDisplay</span>

                    }
                    else
                    {
                        <a class="qr-input__earlybird" href="#" id="earlyRegistrationLink">Early Bird Cutoff: @Model.Event.CutOffDateDisplay</a>
                    }
                    <label class="qr-input__label">Registration Date</label>
                    <input class="qr-input__input" type="text" id="registrationDate" value="@DateTime.Today.ToShortDateString()" />
                </div>
                <div class="qr-input">
                    <button id="refreshRegTypeButton" class="qr-input__refresh"><i class="fa fa-refresh"></i></button>
                    <label class="qr-input__label">Registration Type</label>
                    <div class="radio-group -layout-vertical" data-toggle="buttons">
                        @foreach (var fee in Model.Event.Fees)
                        {
                            <label class="radio" >
                                <input type="radio" name='feeRadioButton' value="@fee.PriceKey"><i class="fa fa-circle-o fa-2x"></i><i class="fa fa-check-circle-o fa-2x"></i><span> @fee.FeeText</span>
                            </label>
                        }
                    </div>
                </div>
            </div>
            <a class="qr-add-modal__btn" id="saveRegTypeEditButton" href="#"><i class="fa fa-floppy-o"></i> Save</a>
            <a class="qr-add-modal__btn" href="#" id="saveChangesButton" style="display: none"><i class="fa fa-spin fa-spinner"></i> Saving</a>
        </div>
        <div id="oversellDialog" class="qr-oversell-modal">
            <div id="oversellTitle">
            </div>
            <div id="oversellError"></div>
            <a class="qr-oversell-modal__cancel-btn" id="oversellCancelButton" href="#"><i class="fa fa-ban"></i> Nevermind</a>
            <a class="qr-oversell-modal__oversell-btn" id="oversellButton" data-key="" href="#"><i class="fa fa-thumbs-up"></i> Oversell</a>
        </div>
    </form>
}

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-scrollTo/2.1.2/jquery.scrollTo.min.js"></script>
@Scripts.Render("~/bundles/pending-registration-js")
@Scripts.Render("~/bundles/jqueryval")